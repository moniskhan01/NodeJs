// const express = require("express");
// const mongoose = require("mongoose"); //moved to modals.user for code refactoring
// // const users = require("./MOCK_DATA.json");
// const app = express();
// const PORT = 8000;

// connecting mongodb
// mongoose
//   .connect("mongodb://127.0.0.1:27017/youtube-app-1")
//   .then(() => console.log("MongoDB Connected"))
//   .catch((err) => console.log("Mongo Error", err));

// Schema for mongoose
// const userSchema = new mongoose.Schema(
//   {
//     first_name: {
//       type: String,
//       required: true,
//     },
//     last_name: {
//       type: String,
//     },
//     email: {
//       type: String,
//       required: true,                moved to modals.user for code refactoring
//       unique: true,
//     },
//     job_title: {
//       type: String,
//     },
//     gender: {
//       type: String,
//     },
//   },
//   { timeStamp: true }
// );

// const User = mongoose.model("user", userSchema);

// //Routes
// // Get the list of all users
// app.get("/api/users", (req, res) => {
//   res.send(users);
// });

// if we wants only user that needs to be render as an html document

// app.get("/users", async (req, res) => {
//   const allDbUsers = await User.find({}); // taking all users from the db
//   const html = `
//     <ul>
//     ${users.map((user) => `<li>${user.first_name}</li>`).join("")}

//     </ul>
//     `;

//   const html = `
//      <ul>
//     ${allDbUsers
//       .map((user) => `<li>${user.first_name} - ${user.email}</li>`)
//       .join("")}
//    </ul>
//     `;

//   res.send(html);
// });

// if we want the user data or info dynamically with the id

// app.get("/api/users/:id", (req, res) => {
//   const id = Number(req.params.id);
//   const user = users.find((user) => user.id === id);
//   res.json(user);
// });

// app.post("/api/users", (req, res) => {
//   // TODO: Create new user
//   res.json({ status: "Pending" });
// });

// app.patch("/api/users/:id", (req, res) => {
//   // TODO: Edit new user
//   res.json({ status: "Pending" });
// });

// app.delete("/api/users/:id", (req, res) => {
//   // TODO: Delete user
//   res.json({ status: "Pending" });
// });

// grouping the requests

// MiddleWare- Plugin
// app.use(express.urlencoded({ extended: false })); // builtin middleware

// app.use(express.json());

// const fs = require("fs");
// const { type } = require("os");
// const { MongoOIDCError } = require("mongodb");
// const { timeStamp } = require("console");
// app.use((req, res, next) => {
//   fs.appendFile(
//     "log.txt",
//     `\n${Date.now()}:${req.method}:${req.path}\n`,
//     (err, data) => {
//       next();
//     }
//   );
//   console.log("Hello from middleware 2nd");
//   res.json({ msg: "Hello from middleware 2nd" });
//   next();
// });

// app.get("/api/users",(req,res)=>{
//     res.json(users)
// })
// Get the list of all users
// app.get("/api/users", async (req, res) => {
//   const allDbUsers = await User.find({});
//   console.log("body", req.body);

//   //   res.send(users);
//   res.send(allDbUsers);
// });

// app
//   .route("/api/users/:id")
//   .get(async (req, res) => {
//     console.log("body", req.body);
//     // const id = Number(req.params.id);
//     // const user = users.find((user) => user.id === id);

//     // ID generated by mongdb automatically

//     const user = await User.findById(req.params.id);

//     if (!user) res.status(404).json({ msg: "User not found" });
//     res.json(user);
//   })
//   .patch(async (req, res) => {
//     // using mongodb
//     await User.findByIdAndUpdate(req.params.id, { last_name: "Happy" });
//     res.json({ status: "Value Updated Successfully" });

// const getId = Number(req.params.id);
// console.log("getId", getId);

// const body = req.body;
// console.log("BODY", body);
// const userIndex = users.findIndex((user) => user.id === getId);
// console.log("userIndex", userIndex);

// const gotUser = users[userIndex];
// console.log("gotUser", gotUser);

// const updatedUser = { ...gotUser, ...body };
// console.log("updateduser", updatedUser);

// users[userIndex] = updatedUser;
// fs.writeFile("./MOCK_DATA.json", JSON.stringify(users), (err, data) => {
//   return res.json({ status: `${getId} updated successfully`, updatedUser });
// });
// console.log(req.body);

// TODO: Edit new user
// res.json({ status: "Pending" });
//   })
//   .delete(async (req, res) => {
//     // using mongodb
//     await User.findByIdAndDelete(req.params.id, { last_name: "Happy" });
//     res.json({ status: "Value deleted Successfully" });

// const body = req.body;
// console.log("delete body", body);

// const id = Number(req.params.id);
// const user = users.find((user) => user.id === id);
// users.pop({ ...body, user });
// fs.writeFile("./MOCK_DATA.json", JSON.stringify(users), (err, data) => {
//   return res.json({ status: `${id} deleted successfully` });
// });

// TODO: Delete user
// res.json({ status: "Pending" });
//   });

// app.post("/api/users", async (req, res) => {
//   const body = req.body;
//   if (
//     !body ||
//     !body.first_name ||
//     !body.last_name ||
//     !body.gender ||
//     !body.job_title ||
//     !body.email
//   ) {
//     res.status(400).json({ msg: "All fields required" });
//   }
//   console.log(body);

// not recommend we create user using mongodb

//   users.push({ ...body, id: users.length + 1 });
//   fs.writeFile("./MOCK_DATA.json", JSON.stringify(users), (err, data) => {
//     return res.status(201).json({ status: "Request Send to add data" });
//   });

// creating user using mongoose

//   const result = await User.create({
//     first_name: body.first_name,
//     last_name: body.last_name,
//     gender: body.gender,
//     email: body.email,
//     job_title: body.job_title,
//   });

//   console.log(result);

//   res.status(201).json({ msg: "User Created Successfully" });

//   TODO: Create new user
// res.json({ status: "Pending" });
// });
// app.listen(PORT, () => console.log(`Server Started at PORT : ${PORT}`));

const express = require("express");

const { connectMongoDb } = require("../connection");

const { logReqRes } = require("../middlewares");

const userRouter = require("../routes/user");

const app = express();
const PORT = 8000;

// connecting mongodb
connectMongoDb("mongodb://127.0.0.1:27017/youtube-app-1").then(() =>
  console.log("MongoDB Connected Successfully!")
);

//MiddleWare - Plugin
app.use(express.urlencoded({ extended: false }));
app.use(logReqRes("log.txt"));

//Routes
app.use("/user", userRouter);

app.listen(PORT, () => console.log(`Server Started at PORT : ${PORT}`));
